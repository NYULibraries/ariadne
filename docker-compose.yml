version: "3.9"

x-build-frontend: &x-build-frontend
  image: ariadne_frontend
  build:
    # See build comment in x-build-frontend-test for why we use ./ instead of
    # frontend/ here.
    # Should we choose to create a separate Dockerfile.test for Jest tests container
    # we can have this context be frontend/.
    context: ./
    cache_from:
      - ariadne_frontend
    dockerfile: frontend/Dockerfile
  networks:
    - ariadne-net
  depends_on:
    - backend

x-build-frontend-e2e: &x-build-frontend-e2e
  image: ariadne_frontend_e2e
  build:
    context: ./
    cache_from:
      - ariadne_frontend_e2e
    dockerfile: frontend/Dockerfile
  networks:
    - ariadne-net

x-build-frontend-test: &x-build-frontend-test
  image: ariadne_frontend_test
  build:
    # Context needs to include backend/ in order to copy over backend/api/testdata/
    # files needed for stubbing out the backend responses.
    context: ./
    cache_from:
      - ariadne_frontend-test
    dockerfile: frontend/Dockerfile.test

x-build-backend: &x-build-backend
  image: ariadne_backend
  build:
    context: backend/
    dockerfile: Dockerfile

x-build-backend-test: &x-build-backend-test
  image: ariadne_backend_test
  build:
    context: backend/
    # See file header comment in Dockerfile.debug-and-test
    dockerfile: Dockerfile.debug-and-test

x-development-volumes-backend: &x-development-volumes-backend
  volumes:
    - ./backend:/app

x-build-e2e: &x-build-e2e
  image: ariadne_e2e
  build:
    context: ./
    dockerfile: e2e/Dockerfile
    cache_from:
      - ariadne_e2e

x-development-volumes-frontend: &x-development-volumes-frontend
  volumes:
    - ./frontend:/app

services:
  frontend:
    <<: *x-build-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/v0/
    ports:
      - "3000:3000"
    # <<: *x-development-volumes-frontend

  frontend-e2e:
    <<: *x-build-frontend-e2e
    ports:
      - "3000:3000"
    # <<: *x-development-volumes-frontend

  frontend-test:
    <<: *x-build-frontend-test
    command: yarn test
    # <<: *x-development-volumes-frontend

  backend:
    <<: *x-build-backend
    build:
      context: backend/
    ports:
      - "8080:8080"
    networks:
      - ariadne-net
    # <<: *x-development-volumes-backend

  backend-debug:
    <<: *x-build-backend-test
    # Dockerfile.debug-and-test is primarily a test container.  We need to override
    # the `go test...` CMD, running delve instead.
    command: [ "./tools/dlv", "--listen=:2345", "--headless=true", "--api-version=2", "--accept-multiclient", "exec", "./ariadne" ]
    cap_add:
      - SYS_PTRACE
    ports:
      # Delve port
      - "2345:2345"
      # Application port
      - "8080:8080"
    networks:
      - ariadne-net
    security_opt:
      - apparmor:unconfined
    # <<: *x-development-volumes-backend

  backend-test:
    <<: *x-build-backend-test
    command: ["go","test","-cover","./..."]
    # <<: *x-development-volumes-backend

  backend-test-coverage:
    <<: *x-build-backend-test
    command:
      - /bin/sh
      - -c
      - |
        go test -coverprofile=coverage.out ./... &&
        go tool cover -func=coverage.out
        # go tool cover -html=coverage.out
    # <<: *x-development-volumes-backend

  e2e:
    <<: *x-build-e2e
    depends_on:
      - frontend-e2e
    command: yarn test:e2e
    networks:
      - ariadne-net
    environment:
      - PLAYWRIGHT_BASE_URL=http://frontend-e2e:3000/
    # <<: *x-development-volumes-frontend

networks:
  ariadne-net:
    driver: bridge

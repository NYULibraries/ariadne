# This Dockerfile is used for building both `backend-debug` and `backend-test`
# Docker Compose services.  Its primary duty is `backend-test`: providing automated
# testing in CI.  The main use case for a delve debuggable container is to
# troubleshoot problems that are manifesting in our containerized environments
# but not in our local development environments.  In such a case, we would actually
# be running delve in a productionized container, not this debug/test container.
# This Dockerfile helps to document the general process of setting up delve debuggable
# containers.  Note that when setting up a productionized containers or doing
# manual hacking in same, there might be extra steps needed to get delve working.
# For example, in alpine, one would need to run `apk add build-base` before running
# `go build` command to avoid a "gcc not in PATH" error.

FROM golang:1.19.1

WORKDIR /app
COPY . .
RUN go mod tidy && \
    go install -v ./... && \
    go build -gcflags="all=-N -l" -o resolve && \
    go clean -modcache && \
    go install -v github.com/go-delve/delve/cmd/dlv@v1.9.0 && \
    mkdir tools && \
    cp /go/bin/dlv tools/

EXPOSE 2345
EXPOSE 8080

CMD [ "go", "test", "./...", "-cover" ]

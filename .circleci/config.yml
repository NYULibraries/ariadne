version: 2.1

dev: &dev 'DEV'
prod: &prod 'PROD'

environment-parameter: &environment-parameter
  environment:
    type: enum
    enum: [ *dev, *prod ]

auth_quay: &auth_quay
  run:
    name: Authenticate Quay
    command: |
      docker login -u "$QUAY_USERNAME" -p "$QUAY_PASSWORD" quay.io

docker-defaults: &docker-defaults
  docker:
    - image: quay.io/nyulibraries/circleci_docker:20.10.6-dc-1.29.1-0
  working_directory: ~/app

commands:
  tag-images-and-push-to-quay:
    description: Tag "latest", git branch, and git branch + git commit SHA1
    parameters:
      image:
        type: string
    steps:
      - <<: *auth_quay
      - run:
          name: Tag images and push to Quay
          command: |
            export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
            docker tag << parameters.image >> quay.io/nyulibraries/<< parameters.image >>:latest
            docker tag << parameters.image >> quay.io/nyulibraries/<< parameters.image >>:${BRANCH_NO_SLASH}
            docker tag << parameters.image >> quay.io/nyulibraries/<< parameters.image >>:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}
            docker push quay.io/nyulibraries/<< parameters.image >>:latest
            docker push quay.io/nyulibraries/<< parameters.image >>:${BRANCH_NO_SLASH}
            docker push quay.io/nyulibraries/<< parameters.image >>:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

  export-hermes-env-vars:
    description: Export Hermes env vars
    parameters:
        <<: *environment-parameter
    steps:
      - when:
          condition:
            equal: [ *dev, << parameters.environment >> ]
          steps:
            - run:
                name: Export Hermes env vars
                command: |
                  echo 'export HERMES_HOST=https://hermes-dev.library.nyu.edu' >> $BASH_ENV
                  echo 'export HERMES_SECRET=$HERMES_SECRET_DEV' >> $BASH_ENV
      - when:
          condition:
            equal: [ *prod, << parameters.environment >> ]
          steps:
            - run:
                name: Export Hermes env vars
                command: |
                  echo 'export HERMES_HOST=https://hermes.library.nyu.edu' >> $BASH_ENV
                  echo 'export HERMES_SECRET=$HERMES_SECRET_PROD' >> $BASH_ENV

  deploy-application:
    description: Build application, test the build, deploy to S3, and export Hermes env vars
    parameters:
        <<: *environment-parameter
    steps:
      - checkout
      - setup_remote_docker
      - export-hermes-env-vars:
          environment: << parameters.environment >>
      - <<: *auth_quay
      - run:
          name: Deploy via Hermes
          command: |
            export TAG=${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
            docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master setImage -deployment=ariadne-backend -tag=$TAG
            docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master setImage -deployment=ariadne-react-nginx -tag=$TAG
            timeout 5m sh -c 'until docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=ariadne-backend; do sleep 5; done'
            timeout 5m sh -c 'until docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=ariadne-react-nginx; do sleep 5; done'
            #docker run -e HERMES_HOST -e HERMES_SECRET -e HERMES_WAIT_PAUSE_MIN=1s -e HERMES_WAIT_PAUSE_MAX=2s quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=ariadne-backend
            #docker run -e HERMES_HOST -e HERMES_SECRET -e HERMES_WAIT_PAUSE_MIN=1s -e HERMES_WAIT_PAUSE_MAX=2s quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=ariadne-react-nginx


jobs:
  frontend-test:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build frontend-test service
          command: |
            docker-compose build frontend-test
      - run:
          name: Run tests
          command: |
            docker-compose run frontend-test
      - tag-images-and-push-to-quay:
          image: "ariadne_frontend_test"

  frontend-build:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build frontend service
          command: |
            docker-compose build frontend
      - run:
          name: Test static site built with correct backend subpath
          command: |
            docker-compose run frontend grep -r '"/v0/"' build/
      - tag-images-and-push-to-quay:
          image: "ariadne_frontend"

  backend-test:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build backend-test service
          command: |
            docker-compose build backend-test
      - run:
          name: Check formatting
          command: |
            gofmt_result="$( docker-compose run backend-test /bin/bash -c 'export APP_PATH=/app/; if [[ ! -z $( find $APP_PATH -name "*.go\
            " ) ]]; then gofmt -l $APP_PATH; else echo >&2 "No *.go files found in path: $APP_PATH"; fi' )"

            # Even if `gofmt -l $APP_PATH` returns no paths, there still seem to
            # be some non-printing characters in `gofmt_result` (in CircleCI output,
            # they appear as "^@" characters), so instead of doing a `test -z` test,
            # simply check for the presence of alphanumeric characters, which
            # would only be present in the output if `gofmt` returned paths or
            # if an error occurred.
            if [[ "$gofmt_result" =~ [[:alnum:]] ]]
            then
                echo -e "\n\ngofmt check fail:\n$gofmt_result"
                exit_status=1
            else
                exit_status=0
            fi

            exit $exit_status
      - run:
          name: Run tests
          command: |
            docker-compose run backend-test
      - tag-images-and-push-to-quay:
          image: "ariadne_backend_test"

  backend-build:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build backend service
          command: |
            docker-compose build backend
      - tag-images-and-push-to-quay:
          image: "ariadne_backend"
  e2e:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build e2e-test service
          command: |
            docker-compose build e2e
      - run:
          name: Run tests
          command: |
            docker-compose run e2e
      - tag-images-and-push-to-quay:
          image: "ariadne_e2e"

  deploy-dev:
    <<: *docker-defaults
    steps:
      - deploy-application:
          environment: *dev

  deploy-prod:
    <<: *docker-defaults
    steps:
      - deploy-application:
          environment: *prod

workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - frontend-test
      - backend-test
      - e2e
      - frontend-build:
          requires:
            - frontend-test
      - backend-build:
          requires:
            - backend-test
      - deploy-dev:
          requires:
              - frontend-build
              - backend-build
              - e2e
          filters:
            branches:
              ignore: main
      - deploy-prod:
          requires:
              - frontend-build
              - backend-build
              - e2e
          filters:
            branches:
              only: main


